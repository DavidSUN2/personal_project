
package ImmutableTriple;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ImmutableTriple1 {

    public static boolean debug = false;

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0501");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0502");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> charSequenceImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0503");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0504");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0505");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0506");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0507");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.CharSequence> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0508");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0509");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0510");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0511");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0512");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0513");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0514");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple5.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0515");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0516");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0517");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0518");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0519");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0520");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0521");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0522");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0523");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0524");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0525");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0526");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0527");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0528");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0529");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0530");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0531");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0532");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0533");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0534");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0535");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0536");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0537");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.String str9 = strComparableImmutableTriple7.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0538");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0539");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0540");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0541");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0542");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.Comparable<java.lang.String>> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", (java.lang.Comparable<java.lang.String>) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0543");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0544");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0545");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0546");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0547");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0548");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0549");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0550");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0551");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0552");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0553");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0554");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0555");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0556");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0557");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        boolean boolean9 = strComparableImmutableTriple4.equals((java.lang.Object) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0558");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0559");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0560");
        java.io.Serializable serializable2 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.String, java.io.Serializable> strTriple3 = org.apache.commons.lang3.tuple.Triple.of("", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", serializable2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0561");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0562");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0563");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str9.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0564");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0565");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass7, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0566");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0567");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0568");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0569");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0570");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0571");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0572");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0573");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0574");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0575");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0576");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0577");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0578");
        java.lang.Class<?> wildcardClass0 = null;
        java.lang.reflect.AnnotatedElement annotatedElement2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Class<?>, java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> wildcardClassImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of(wildcardClass0, (java.lang.Comparable<java.lang.String>) "hi!", annotatedElement2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClassImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0579");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass4 = strComparableImmutableTriple3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.reflect.Type, java.lang.CharSequence, java.lang.CharSequence> typeImmutableTriple7 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.reflect.Type) wildcardClass4, (java.lang.CharSequence) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeImmutableTriple7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0580");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0581");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0582");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0583");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0584");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0585");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0586");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0587");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0588");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0589");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0590");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0591");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0592");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0593");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0594");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0595");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0596");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0597");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0598");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0599");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0600");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0601");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0602");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0603");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0604");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0605");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0606");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0607");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0608");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0609");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0610");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0611");
        java.lang.Class<?> wildcardClass0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Class<?>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> wildcardClassImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of(wildcardClass0, genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClassImmutableTriple9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0612");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0613");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0614");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str9 = strComparableImmutableTriple7.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0615");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0616");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0617");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.String, java.lang.String> charSequenceTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", "");
        java.lang.Class<?> wildcardClass5 = charSequenceTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0618");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0619");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0620");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0621");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0622");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0623");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0624");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0625");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0626");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0627");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0628");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0629");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0630");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0631");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0632");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str8.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0633");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0634");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass4 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0635");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0636");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.reflect.AnnotatedElement, java.lang.CharSequence> charSequenceTriple8 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass2, (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0637");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0638");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0639");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0640");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0641");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0642");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0643");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0644");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0645");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0646");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0647");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0648");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0649");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0650");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple6.middle;
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> charSequenceTriple9 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "", genericDeclaration1, genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0651");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0652");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0653");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0654");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0655");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0656");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0657");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0658");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0659");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0660");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", strComparable9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0661");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0662");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0663");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple7.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0664");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0665");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0666");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0667");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0668");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0669");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0670");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0671");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.CharSequence) "(hi!,class java.lang.Object,)");
        java.lang.Class<?> wildcardClass4 = strImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0672");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0673");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0674");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0675");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0676");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0677");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0678");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0679");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0680");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0681");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0682");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str9.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0683");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0684");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0685");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0686");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0687");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0688");
        java.io.Serializable serializable1 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.lang.String> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", serializable1, "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0689");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0690");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0691");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0692");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0693");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.getRight();
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.io.Serializable> strTriple8 = org.apache.commons.lang3.tuple.Triple.of("(hi!,class java.lang.Object,)", (java.lang.CharSequence) "hi!", (java.io.Serializable) strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0694");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0695");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable5.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0696");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0697");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0698");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0699");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0700");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0701");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0702");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0703");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0704");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0705");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0706");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0707");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0708");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0709");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0710");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0711");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.getRight();
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.io.Serializable> strTriple8 = org.apache.commons.lang3.tuple.Triple.of("(hi!,class java.lang.Object,)", (java.lang.CharSequence) "hi!", (java.io.Serializable) strComparableImmutableTriple6);
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0712");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> objImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.lang.Object) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0713");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0714");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0715");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.String str9 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0716");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0717");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0718");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0719");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0720");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0721");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0722");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0723");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0724");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0725");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0726");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0727");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0728");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0729");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0730");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0731");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0732");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0733");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0734");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0735");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0736");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0737");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0738");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0739");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0740");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0741");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0742");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0743");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0744");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0745");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0746");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0747");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0748");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0749");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0750");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0751");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0752");
        java.lang.Object obj1 = null;
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple6.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Object, java.lang.reflect.AnnotatedElement> charSequenceImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", obj1, (java.lang.reflect.AnnotatedElement) genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0753");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0754");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0755");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0756");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0757");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0758");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0759");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0760");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0761");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0762");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0763");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0764");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0765");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", strComparable9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0766");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0767");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0768");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0769");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0770");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0771");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String>((java.lang.CharSequence) "hi!", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", "(hi!,class java.lang.Object,hi!)");
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0772");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0773");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0774");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0775");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0776");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0777");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0778");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0779");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0780");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0781");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0782");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0783");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0784");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0785");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0786");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0787");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0788");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0789");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0790");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0791");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0792");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0793");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0794");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0795");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0796");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0797");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0798");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0799");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0800");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0801");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0802");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0803");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0804");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0805");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0806");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0807");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0808");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.CharSequence, java.lang.String> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0809");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0810");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Comparable<java.lang.String>> strComparableTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "hi!", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass5 = strComparableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0811");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0812");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0813");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0814");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0815");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0816");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0817");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0818");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0819");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.String, java.lang.Comparable<java.lang.String>> strTriple3 = org.apache.commons.lang3.tuple.Triple.of("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0820");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Comparable<java.lang.String>> strComparableTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "hi!", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass5 = strComparableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0821");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0822");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0823");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0824");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0825");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0826");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0827");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0828");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0829");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0830");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0831");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0832");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass4 = strImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0833");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0834");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0835");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.String str6 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0836");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0837");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0838");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0839");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0840");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0841");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0842");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0843");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0844");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0845");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0846");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.String str5 = strComparableImmutableTriple3.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple3.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration6);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0847");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0848");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0849");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0850");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.CharSequence> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0851");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0852");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0853");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0854");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String>((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0855");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0856");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.String str9 = strComparableImmutableTriple3.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0857");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0858");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0859");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0860");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0861");
        java.lang.reflect.AnnotatedElement annotatedElement1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.reflect.AnnotatedElement, java.lang.CharSequence> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", annotatedElement1, (java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0862");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0863");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0864");
        java.lang.reflect.GenericDeclaration genericDeclaration3 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", genericDeclaration3, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strTriple6 = org.apache.commons.lang3.tuple.Triple.of("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", strComparableImmutableTriple5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple6);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0865");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0866");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0867");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0868");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "hi!" + "'", strComparable4.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0869");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0870");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.left;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0871");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0872");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0873");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0874");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0875");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0876");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0877");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0878");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0879");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0880");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))" + "'", str9.equals("((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0881");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0882");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0883");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0884");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0885");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0886");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0887");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0888");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0889");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0890");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0891");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0892");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0893");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "(hi!,class java.lang.Object,)", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0894");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0895");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0896");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple3.getMiddle();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0897");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0898");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0899");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0900");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0901");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0902");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0903");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0904");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0905");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0906");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0907");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0908");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple6.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple6.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.Class<?>> charSequenceImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))", wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0909");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0910");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0911");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple3.getMiddle();
        java.lang.String str6 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))" + "'", str6.equals("(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0912");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0913");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0914");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0915");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0916");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0917");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0918");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0919");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0920");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0921");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0922");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0923");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0924");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0925");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0926");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0927");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0928");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0929");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0930");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0931");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable5.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0932");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0933");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.Type type8 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, java.lang.CharSequence, java.lang.reflect.Type> strComparableImmutableTripleImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of(strComparableImmutableTriple4, (java.lang.CharSequence) "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))", type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTripleImmutableTriple9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0934");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0935");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.String str5 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple3.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str5.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration6);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0936");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0937");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0938");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0939");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.String, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strImmutableTriple8 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(hi!,class java.lang.Object,hi!)", "((hi!,class java.lang.Object,),class java.lang.Object,)", strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0940");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0941");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0942");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0943");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0944");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0945");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0946");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0947");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0948");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0949");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str8.equals("(hi!,class java.lang.Object,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0950");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0951");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0952");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0953");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0954");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0955");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0956");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0957");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.String str5 = strComparableImmutableTriple3.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0958");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0959");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0960");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0961");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0962");
        java.lang.Comparable<java.lang.String> strComparable0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>(strComparable0, (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0963");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.String str5 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))" + "'", str5.equals("(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0964");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0965");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0966");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0967");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0968");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0969");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.String, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strImmutableTriple8 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(hi!,class java.lang.Object,hi!)", "((hi!,class java.lang.Object,),class java.lang.Object,)", strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0970");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0971");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0972");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0973");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0974");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0975");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0976");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0977");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0978");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0979");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0980");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0981");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0982");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0983");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0984");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0985");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0986");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0987");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0988");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0989");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0990");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0991");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0992");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0993");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0994");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0995");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0996");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0997");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0998");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test0999");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
    }

    @Test
    public void ImmutableTriple() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.test1000");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }
}

