
package TypeUtils;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TypeUtils0 {

    public static boolean debug = false;

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test001");
        java.lang.reflect.Type type0 = null;
        boolean boolean1 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test002");
        java.lang.reflect.ParameterizedType parameterizedType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> wildcardTypeVariableMap1 = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(parameterizedType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test003");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test004");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type1);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test005");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 100.0f, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test006");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test007");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test008");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test009");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test010");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test011");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test012");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test013");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { wildcardClass1, wildcardClass3 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test014");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test015");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test016");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test017");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test018");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test019");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test020");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test021");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test022");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test023");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test024");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) true, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test025");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = typeArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test026");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test027");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test028");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0f), type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test029");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test030");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) 10, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test031");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test032");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test033");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test034");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) "hi!", type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test035");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test036");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test037");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test038");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test039");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test040");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test041");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test042");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test043");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test044");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test045");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test046");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test047");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test048");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test049");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test050");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test051");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test052");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test053");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test054");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test055");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test056");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test057");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test058");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test059");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test060");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray2, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test061");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test062");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test063");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test064");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test065");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test066");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test067");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test068");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test069");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test070");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test071");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test072");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test073");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test074");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) ' ', (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test075");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test076");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test077");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test078");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test079");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test080");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test081");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test082");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test083");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test084");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test085");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray1.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test086");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test087");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test088");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test089");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test090");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test091");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test092");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test093");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test094");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test095");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test096");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test097");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0f, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test098");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test099");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test100");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test101");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test102");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test103");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test104");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test105");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test106");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test107");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test108");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test109");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test110");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test111");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test112");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type5, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test113");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test114");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test115");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test116");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test117");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test118");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test119");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test120");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) ' ', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test121");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test122");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test123");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test124");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test125");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test126");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test127");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test128");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test129");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test130");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test131");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test132");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test133");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test134");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test135");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) 10, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test136");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test137");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test138");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test139");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test140");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test141");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test142");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = type5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test143");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test144");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test145");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test146");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test147");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test148");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test149");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test150");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test151");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test152");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test153");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test154");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test155");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test156");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test157");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test158");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test159");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test160");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0d), (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test161");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test162");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test163");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test164");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test165");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test166");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test167");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test168");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test169");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test170");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test171");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test172");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test173");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test174");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test175");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test176");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test177");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test178");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray5, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test179");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test180");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test181");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test182");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test183");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test184");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test185");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test186");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test187");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test188");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test189");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test190");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test191");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test192");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean3, type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test193");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test194");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test195");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test196");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test197");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test198");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test199");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test200");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test201");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test202");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test203");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test204");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test205");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test206");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test207");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test208");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test209");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test210");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test211");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test212");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test213");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test214");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass6 = type4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test215");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test216");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test217");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test218");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test219");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test220");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test221");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test222");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test223");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test224");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test225");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test226");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test227");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = type6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test228");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test229");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test230");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test231");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test232");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test233");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test234");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test235");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test236");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test237");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test238");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test239");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test240");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test241");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test242");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test243");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test244");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test245");
        java.lang.Object obj0 = new java.lang.Object();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test246");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass2, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test247");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test248");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test249");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test250");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test251");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test252");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test253");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test254");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test255");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test256");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test257");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test258");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0f), (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test259");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test260");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test261");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test262");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test263");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = null;
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test264");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test265");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test266");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test267");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test268");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test269");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test270");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test271");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test272");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test273");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.Class<?> wildcardClass7 = type4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test274");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test275");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test276");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test277");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test278");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test279");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test280");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test281");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test282");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test283");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test284");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test285");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test286");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test287");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test288");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test289");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test290");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test291");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test292");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test293");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test294");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test295");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test296");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test297");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test298");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test299");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test300");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test301");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test302");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test303");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test304");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test305");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test306");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test307");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test308");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test309");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test310");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test311");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray3.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test312");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test313");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass4, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test314");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test315");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test316");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test317");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test318");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test319");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test320");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test321");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test322");
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1L, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test323");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test324");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test325");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test326");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test327");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test328");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test329");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test330");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test331");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test332");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test333");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test334");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test335");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test336");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test337");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test338");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test339");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) type7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test340");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test341");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test342");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test343");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test344");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test345");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test346");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test347");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test348");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test349");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test350");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test351");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test352");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test353");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test354");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test355");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test356");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test357");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test358");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test359");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test360");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test361");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test362");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test363");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test364");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test365");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray3.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test366");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test367");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test368");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test369");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test370");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test371");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test372");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test373");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test374");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test375");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test376");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test377");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test378");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test379");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test380");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 100.0d, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test381");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test382");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test383");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test384");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test385");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test386");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test387");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test388");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test389");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test390");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test391");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test392");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test393");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test394");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test395");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test396");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test397");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test398");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test399");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test400");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test401");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test402");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test403");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test404");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test405");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test406");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test407");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test408");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test409");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = type7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test410");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test411");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test412");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test413");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test414");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test415");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test416");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test417");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test418");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test419");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test420");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test421");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test422");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test423");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test424");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test425");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test426");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test427");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test428");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test429");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test430");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test431");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test432");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test433");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test434");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test435");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test436");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test437");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test438");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test439");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test440");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test441");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test442");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test443");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test444");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test445");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test446");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test447");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass7 = type4.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test448");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test449");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test450");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test451");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test452");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test453");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test454");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test455");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass9 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test456");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test457");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test458");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test459");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test460");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test461");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test462");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = type6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test463");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test464");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test465");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test466");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test467");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test468");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test469");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test470");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test471");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test472");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test473");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test474");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test475");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test476");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray5, type7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test477");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test478");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test479");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test480");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test481");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test482");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test483");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test484");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test485");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test486");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test487");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test488");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test489");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test490");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test491");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test492");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0d), (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test493");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test494");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test495");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test496");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test497");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test498");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test499");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.test500");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }
}

