package ImmutableTriple;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ImmutableTriple0 {

    public static boolean debug = false;

    @Test
    public void ImmutableTriple0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0001");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0002");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0003");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.io.Serializable, java.lang.CharSequence, java.lang.String> serializableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!", "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(serializableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0004");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0005");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0006");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0007");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0008");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0009");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0010");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0011");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0012");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0013");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0014");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0015");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0016");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0017");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0018");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.Object> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.CharSequence) "(hi!,class java.lang.Object,)", (java.lang.Object) (byte) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0019");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0020");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0021");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0022");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0023");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0024");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0025");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0026");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str9 = strComparableImmutableTriple5.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0027");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0028");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0029");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0030");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableTriple7 = null;
        // The following exception was thrown during execution in ImmutableTriple generation
        try {
            int int8 = strComparableImmutableTriple4.compareTo(strComparableTriple7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0031");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0032");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0033");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0034");
        java.lang.reflect.Type type1 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "(hi!,class java.lang.Object,)", type1, (java.lang.Comparable<java.lang.String>) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0035");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0036");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0037");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0038");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0039");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0040");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0041");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0042");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0043");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0044");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0045");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0046");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0047");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0048");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0049");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0050");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0051");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.AnnotatedElement) wildcardClass2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0052");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0053");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0054");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0055");
        java.lang.Object obj2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.Object> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("hi!", (java.lang.Comparable<java.lang.String>) "hi!", obj2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0056");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0057");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0058");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0059");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0060");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.getRight();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple6.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.CharSequence, java.lang.reflect.Type> charSequenceImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "hi!", (java.lang.CharSequence) "(hi!,class java.lang.Object,)", (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0061");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0062");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0063");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0064");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0065");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        boolean boolean9 = strComparableImmutableTriple4.equals((java.lang.Object) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0066");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass9 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0067");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0068");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0069");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0070");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0071");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0072");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0073");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0074");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0075");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0076");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0077");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0078");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0079");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0080");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0081");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0082");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0083");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0084");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0085");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0086");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0087");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0088");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0089");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0090");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0091");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0092");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0093");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.CharSequence) "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0094");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0095");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0096");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        boolean boolean9 = strComparableImmutableTriple4.equals((java.lang.Object) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0097");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0098");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0099");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0100");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0101");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple6.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>("", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.AnnotatedElement) genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0102");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0103");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0104");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0105");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str9 = strComparableImmutableTriple7.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0106");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0107");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0108");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0109");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0110");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0111");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0112");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.left;
        java.lang.String str7 = strComparableImmutableTriple5.toString();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, java.lang.String> charSequenceImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, java.lang.String>((java.lang.CharSequence) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", strComparableImmutableTriple5, "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0113");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0114");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0115");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0116");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0117");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0118");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0119");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0120");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple6.middle;
        java.lang.String str8 = strComparableImmutableTriple6.toString();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strComparableImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "", genericDeclaration1, strComparableImmutableTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0121");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0122");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0123");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0124");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0125");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0126");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0127");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0128");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0129");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0130");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0131");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.reflect.GenericDeclaration) wildcardClass7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0132");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0133");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0134");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0135");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0136");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0137");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0138");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0139");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0140");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0141");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0142");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0143");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0144");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0145");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0146");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0147");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0148");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0149");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0150");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0151");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0152");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0153");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0154");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0155");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0156");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0157");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0158");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0159");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0160");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0161");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0162");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0163");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0164");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0165");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0166");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0167");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0168");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0169");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0170");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0171");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0172");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0173");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0174");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0175");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0176");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0177");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0178");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0179");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
    }

    @Test
    public void ImmutableTriple0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0180");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0181");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.String, java.lang.Comparable<java.lang.String>> objImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of(obj0, "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(objImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0182");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0183");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0184");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0185");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0186");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0187");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0188");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0189");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0190");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0191");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0192");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0193");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0194");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0195");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0196");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0197");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0198");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0199");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0200");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0201");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0202");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0203");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0204");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0205");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0206");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0207");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0208");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0209");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0210");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0211");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.String, java.lang.CharSequence> objImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of(obj0, "(hi!,class java.lang.Object,)", (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass4 = objImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(objImmutableTriple3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0212");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0213");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0214");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0215");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0216");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0217");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0218");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0219");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0220");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0221");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0222");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0223");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0224");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0225");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0226");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0227");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0228");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0229");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0230");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0231");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0232");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0233");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0234");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0235");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable9.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0236");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0237");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0238");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0239");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0240");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0241");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0242");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0243");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0244");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0245");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0246");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0247");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0248");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple7.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0249");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0250");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0251");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0252");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0253");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0254");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0255");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0256");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0257");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0258");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0259");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0260");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0261");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0262");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0263");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0264");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0265");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0266");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0267");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0268");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0269");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0270");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0271");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0272");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0273");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0274");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0275");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0276");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0277");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0278");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0279");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0280");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple7 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass3, "", (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.CharSequence, java.lang.Class<?>> charSequenceTriple8 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.CharSequence) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", wildcardClass3);
        java.lang.Class<?> wildcardClass9 = charSequenceTriple8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0281");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.CharSequence> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.CharSequence) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0282");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0283");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0284");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0285");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0286");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0287");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0288");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0289");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0290");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0291");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0292");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0293");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0294");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0295");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0296");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0297");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0298");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0299");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0300");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0301");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0302");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0303");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0304");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0305");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0306");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0307");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0308");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0309");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0310");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0311");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0312");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0313");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Object obj8 = null;
        boolean boolean9 = strComparableImmutableTriple4.equals(obj8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0314");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple5.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0315");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0316");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0317");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Object obj8 = null;
        boolean boolean9 = strComparableImmutableTriple4.equals(obj8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0318");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0319");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0320");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0321");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0322");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0323");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0324");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0325");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0326");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0327");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0328");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0329");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0330");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0331");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0332");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0333");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0334");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0335");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0336");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0337");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0338");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0339");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0340");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0341");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple5.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0342");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0343");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass7 = strComparable6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0344");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0345");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0346");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0347");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0348");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0349");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0350");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0351");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0352");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0353");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0354");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0355");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0356");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0357");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0358");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0359");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0360");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableTriple7 = null;
        // The following exception was thrown during execution in ImmutableTriple generation
        try {
            int int8 = strComparableImmutableTriple4.compareTo(strComparableTriple7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0361");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0362");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0363");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0364");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0365");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0366");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0367");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple6.right;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Object> strComparableTriple9 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.Object) strComparable8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple9);
    }

    @Test
    public void ImmutableTriple0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0368");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0369");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0370");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0371");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.Comparable<java.lang.String>> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0372");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0373");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0374");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0375");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0376");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0377");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0378");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0379");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0380");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0381");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0382");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.String> strTriple3 = org.apache.commons.lang3.tuple.Triple.of("", (java.lang.CharSequence) "(hi!,class java.lang.Object,)", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple3);
    }

    @Test
    public void ImmutableTriple0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0383");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0384");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0385");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0386");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0387");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0388");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0389");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0390");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0391");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0392");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0393");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0394");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass9 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0395");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0396");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0397");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0398");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0399");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0400");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0401");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0402");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0403");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0404");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0405");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0406");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0407");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0408");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0409");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0410");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0411");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0412");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0413");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0414");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0415");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0416");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0417");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0418");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0419");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0420");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0421");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple5.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0422");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0423");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0424");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0425");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0426");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0427");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0428");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0429");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0430");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0431");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        boolean boolean8 = strComparableImmutableTriple4.equals((java.lang.Object) (byte) -1);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0432");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0433");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0434");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0435");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0436");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0437");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0438");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0439");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0440");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0441");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0442");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0443");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0444");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple7 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass3, "", (java.lang.reflect.GenericDeclaration) wildcardClass6);
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Class<?>> strComparableTriple8 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple8);
    }

    @Test
    public void ImmutableTriple0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0445");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0446");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0447");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0448");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0449");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0450");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0451");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0452");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0453");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0454");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0455");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0456");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0457");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str7.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0458");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0459");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0460");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0461");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0462");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0463");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0464");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0465");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0466");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0467");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0468");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0469");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0470");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0471");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0472");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0473");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0474");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0475");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0476");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0477");
        java.lang.Class<?> wildcardClass0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Class<?>, java.lang.String, java.lang.Class<?>> wildcardClassImmutableTriple4 = org.apache.commons.lang3.tuple.ImmutableTriple.of(wildcardClass0, "(hi!,class java.lang.Object,)", wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClassImmutableTriple4);
    }

    @Test
    public void ImmutableTriple0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0478");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0479");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0480");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0481");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0482");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0483");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0484");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0485");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0486");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0487");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0488");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0489");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0490");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0491");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0492");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0493");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0494");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0495");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0496");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0497");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0498");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0499");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.io.Serializable serializable4 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.reflect.GenericDeclaration, java.lang.String, java.io.Serializable> genericDeclarationImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.reflect.GenericDeclaration, java.lang.String, java.io.Serializable>((java.lang.reflect.GenericDeclaration) wildcardClass2, "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", serializable4);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement, java.lang.CharSequence> strComparableImmutableTriple7 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.AnnotatedElement) wildcardClass2, (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple7);
    }

    @Test
    public void ImmutableTriple0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple0.ImmutableTriple0500");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }
}

