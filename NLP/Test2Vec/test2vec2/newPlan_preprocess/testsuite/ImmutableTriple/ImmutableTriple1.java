package ImmutableTriple;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ImmutableTriple1 {

    public static boolean debug = false;

    @Test
    public void ImmutableTriple0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0501");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0502");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> charSequenceImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0503");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0504");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0505");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0506");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0507");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.CharSequence> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0508");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0509");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0510");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0511");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0512");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0513");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0514");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple5.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0515");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0516");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0517");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0518");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0519");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass7 = genericDeclaration6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0520");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0521");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0522");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0523");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0524");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0525");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0526");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0527");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0528");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0529");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0530");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0531");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0532");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0533");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0534");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0535");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0536");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0537");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.String str9 = strComparableImmutableTriple7.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0538");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0539");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0540");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0541");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0542");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.Comparable<java.lang.String>> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", (java.lang.Comparable<java.lang.String>) "hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0543");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0544");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0545");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0546");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0547");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0548");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0549");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0550");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0551");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str8.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0552");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0553");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0554");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0555");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0556");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0557");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        boolean boolean9 = strComparableImmutableTriple4.equals((java.lang.Object) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void ImmutableTriple0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0558");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0559");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0560");
        java.io.Serializable serializable2 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.String, java.io.Serializable> strTriple3 = org.apache.commons.lang3.tuple.Triple.of("", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", serializable2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple3);
    }

    @Test
    public void ImmutableTriple0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0561");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0562");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0563");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str9.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0564");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0565");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass7, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0566");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0567");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0568");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0569");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0570");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0571");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0572");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0573");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0574");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0575");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0576");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0577");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0578");
        java.lang.Class<?> wildcardClass0 = null;
        java.lang.reflect.AnnotatedElement annotatedElement2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Class<?>, java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> wildcardClassImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of(wildcardClass0, (java.lang.Comparable<java.lang.String>) "hi!", annotatedElement2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClassImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0579");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass4 = strComparableImmutableTriple3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.reflect.Type, java.lang.CharSequence, java.lang.CharSequence> typeImmutableTriple7 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.reflect.Type) wildcardClass4, (java.lang.CharSequence) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeImmutableTriple7);
    }

    @Test
    public void ImmutableTriple0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0580");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0581");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0582");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0583");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0584");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0585");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0586");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0587");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0588");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0589");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0590");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0591");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0592");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0593");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0594");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0595");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0596");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0597");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0598");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0599");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0600");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0601");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0602");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0603");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0604");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0605");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0606");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0607");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0608");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0609");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0610");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0611");
        java.lang.Class<?> wildcardClass0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Class<?>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> wildcardClassImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of(wildcardClass0, genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClassImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0612");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0613");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0614");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str9 = strComparableImmutableTriple7.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0615");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0616");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0617");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.String, java.lang.String> charSequenceTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", "");
        java.lang.Class<?> wildcardClass5 = charSequenceTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void ImmutableTriple0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0618");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.String str8 = strComparableImmutableTriple7.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0619");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0620");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0621");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0622");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0623");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0624");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0625");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0626");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0627");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0628");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0629");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0630");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0631");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass8 = strComparable7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0632");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str8.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0633");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0634");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.Class<?> wildcardClass4 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0635");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0636");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.reflect.AnnotatedElement, java.lang.CharSequence> charSequenceTriple8 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass2, (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple8);
    }

    @Test
    public void ImmutableTriple0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0637");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0638");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0639");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0640");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0641");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0642");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void ImmutableTriple0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0643");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0644");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0645");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0646");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0647");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0648");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0649");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0650");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple6.middle;
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.reflect.GenericDeclaration, java.lang.reflect.GenericDeclaration> charSequenceTriple9 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "", genericDeclaration1, genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple9);
    }

    @Test
    public void ImmutableTriple0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0651");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0652");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0653");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0654");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0655");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0656");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0657");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0658");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0659");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0660");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", strComparable9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0661");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0662");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0663");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple7.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0664");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0665");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0666");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0667");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0668");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0669");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0670");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0671");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.CharSequence) "(hi!,class java.lang.Object,)");
        java.lang.Class<?> wildcardClass4 = strImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0672");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0673");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0674");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0675");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass7 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void ImmutableTriple0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0676");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0677");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0678");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0679");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0680");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0681");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0682");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str9.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0683");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0684");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0685");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0686");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0687");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0688");
        java.io.Serializable serializable1 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.lang.String> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", serializable1, "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0689");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0690");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0691");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0692");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0693");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.getRight();
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.io.Serializable> strTriple8 = org.apache.commons.lang3.tuple.Triple.of("(hi!,class java.lang.Object,)", (java.lang.CharSequence) "hi!", (java.io.Serializable) strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0694");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0695");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable5.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0696");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0697");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0698");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0699");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0700");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0701");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0702");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0703");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0704");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0705");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0706");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0707");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0708");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0709");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.lang.CharSequence> strTriple4 = org.apache.commons.lang3.tuple.Triple.of("hi!", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass5 = strTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0710");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0711");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.getRight();
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, java.io.Serializable> strTriple8 = org.apache.commons.lang3.tuple.Triple.of("(hi!,class java.lang.Object,)", (java.lang.CharSequence) "hi!", (java.io.Serializable) strComparableImmutableTriple6);
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0712");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> objImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Object, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>((java.lang.Object) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
    }

    @Test
    public void ImmutableTriple0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0713");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0714");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0715");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.String str9 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0716");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple7);
    }

    @Test
    public void ImmutableTriple0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0717");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0718");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0719");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0720");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0721");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0722");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0723");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0724");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0725");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0726");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0727");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0728");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0729");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0730");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0731");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0732");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0733");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0734");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0735");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0736");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0737");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0738");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0739");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0740");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0741");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0742");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
    }

    @Test
    public void ImmutableTriple0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0743");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0744");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0745");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0746");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0747");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0748");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0749");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0750");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0751");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0752");
        java.lang.Object obj1 = null;
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple6.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Object, java.lang.reflect.AnnotatedElement> charSequenceImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", obj1, (java.lang.reflect.AnnotatedElement) genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0753");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0754");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0755");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0756");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0757");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0758");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0759");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0760");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0761");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0762");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0763");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0764");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0765");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", strComparable9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0766");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0767");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0768");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration6, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0769");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0770");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0771");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String>((java.lang.CharSequence) "hi!", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", "(hi!,class java.lang.Object,hi!)");
    }

    @Test
    public void ImmutableTriple0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0772");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0773");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass8 = genericDeclaration7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0774");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0775");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0776");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0777");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0778");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0779");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0780");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0781");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0782");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.getMiddle();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0783");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0784");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0785");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0786");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0787");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0788");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0789");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0790");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0791");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0792");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0793");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0794");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0795");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0796");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0797");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0798");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0799");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0800");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0801");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0802");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0803");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0804");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0805");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void ImmutableTriple0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0806");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
    }

    @Test
    public void ImmutableTriple0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0807");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0808");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.CharSequence, java.lang.String> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0809");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0810");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Comparable<java.lang.String>> strComparableTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "hi!", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass5 = strComparableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0811");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0812");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0813");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0814");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0815");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0816");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0817");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0818");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0819");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.String, java.lang.Comparable<java.lang.String>> strTriple3 = org.apache.commons.lang3.tuple.Triple.of("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple3);
    }

    @Test
    public void ImmutableTriple0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0820");
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.Comparable<java.lang.String>> strComparableTriple4 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "hi!", "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass5 = strComparableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0821");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0822");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0823");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0824");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0825");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0826");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0827");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0828");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void ImmutableTriple0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0829");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0830");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0831");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0832");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Class<?> wildcardClass4 = strImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void ImmutableTriple0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0833");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0834");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0835");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.String str6 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0836");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0837");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0838");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0839");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0840");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0841");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0842");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0843");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0844");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0845");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0846");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.String str5 = strComparableImmutableTriple3.toString("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple3.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", str5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration6);
    }

    @Test
    public void ImmutableTriple0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0847");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)" + "'", strComparable5.equals("((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)"));
    }

    @Test
    public void ImmutableTriple0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0848");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0849");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0850");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.CharSequence, java.lang.CharSequence> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "(hi!,class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0851");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0852");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0853");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0854");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String>((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
    }

    @Test
    public void ImmutableTriple0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0855");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0856");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.String str9 = strComparableImmutableTriple3.toString("(hi!,class java.lang.Object,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str9.equals("(hi!,class java.lang.Object,hi!)"));
    }

    @Test
    public void ImmutableTriple0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0857");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0858");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0859");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0860");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0861");
        java.lang.reflect.AnnotatedElement annotatedElement1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.reflect.AnnotatedElement, java.lang.CharSequence> strImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))", annotatedElement1, (java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0862");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "hi!" + "'", str9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0863");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0864");
        java.lang.reflect.GenericDeclaration genericDeclaration3 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", genericDeclaration3, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        org.apache.commons.lang3.tuple.Triple<java.lang.String, java.lang.CharSequence, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strTriple6 = org.apache.commons.lang3.tuple.Triple.of("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.CharSequence) "(hi!,class java.lang.Object,hi!)", strComparableImmutableTriple5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strTriple6);
    }

    @Test
    public void ImmutableTriple0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0865");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0866");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0867");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0868");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "hi!" + "'", strComparable4.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0869");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0870");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.left;
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.right;
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void ImmutableTriple0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0871");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0872");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0873");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0874");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "" + "'", str6.equals(""));
    }

    @Test
    public void ImmutableTriple0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0875");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0876");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0877");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) 0L);
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0878");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0879");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Object obj7 = null;
        boolean boolean8 = strComparableImmutableTriple4.equals(obj7);
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0880");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.String str9 = strComparableImmutableTriple8.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))" + "'", str9.equals("((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))"));
    }

    @Test
    public void ImmutableTriple0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0881");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str8.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0882");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0883");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0884");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0885");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0886");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0887");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0888");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0889");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0890");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0891");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0892");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0893");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "(hi!,class java.lang.Object,)", "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0894");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0895");
        org.apache.commons.lang3.tuple.Triple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.String> charSequenceTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.CharSequence) "((hi!,class java.lang.Object,),class java.lang.Object,)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceTriple3);
    }

    @Test
    public void ImmutableTriple0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0896");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple3.getMiddle();
        // The following exception was thrown during execution in ImmutableTriple generation
        try {
            java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0897");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0898");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple5.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0899");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass6 = strComparableImmutableTriple5.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass6, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple8.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0900");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0901");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0902");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0903");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0904");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0905");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0906");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0907");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.Triple<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableTriple3 = org.apache.commons.lang3.tuple.Triple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", genericDeclaration2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableTriple3);
    }

    @Test
    public void ImmutableTriple0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0908");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple6.middle;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple6.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.Comparable<java.lang.String>, java.lang.Class<?>> charSequenceImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.CharSequence) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))", wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(charSequenceImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0909");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0910");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str9.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0911");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple3.getMiddle();
        java.lang.String str6 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))" + "'", str6.equals("(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))"));
    }

    @Test
    public void ImmutableTriple0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0912");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0913");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0914");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0915");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0916");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0917");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0918");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0919");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0920");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
    }

    @Test
    public void ImmutableTriple0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0921");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0922");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0923");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0924");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Class<?> wildcardClass9 = strComparable8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0925");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0926");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0927");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0928");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0929");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0930");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        boolean boolean7 = strComparableImmutableTriple4.equals((java.lang.Object) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0931");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple3.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable5.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0932");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0933");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.Type type8 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>, java.lang.CharSequence, java.lang.reflect.Type> strComparableImmutableTripleImmutableTriple9 = org.apache.commons.lang3.tuple.ImmutableTriple.of(strComparableImmutableTriple4, (java.lang.CharSequence) "((hi!,class java.lang.Object,hi!),class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,hi!))", type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTripleImmutableTriple9);
    }

    @Test
    public void ImmutableTriple0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0934");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0935");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.String str5 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple3.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str5.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration6);
    }

    @Test
    public void ImmutableTriple0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0936");
        java.lang.reflect.GenericDeclaration genericDeclaration2 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)", genericDeclaration2, (java.lang.Comparable<java.lang.String>) "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass5 = strComparableImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple7.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0937");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0938");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0939");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.String, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strImmutableTriple8 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(hi!,class java.lang.Object,hi!)", "((hi!,class java.lang.Object,),class java.lang.Object,)", strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0940");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0941");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0942");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0943");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.right;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0944");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0945");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0946");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str6 = strComparableImmutableTriple4.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str9.equals("((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0947");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = genericDeclaration8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0948");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0949");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,hi!)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,hi!)" + "'", str8.equals("(hi!,class java.lang.Object,hi!)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0950");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0951");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0952");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)" + "'", str9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)"));
    }

    @Test
    public void ImmutableTriple0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0953");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0954");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0955");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0956");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0957");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.String str5 = strComparableImmutableTriple3.toString("hi!");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple3.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable6.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }

    @Test
    public void ImmutableTriple0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0958");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0959");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0960");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.io.Serializable, java.io.Serializable>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.io.Serializable) strComparableImmutableTriple5, (java.io.Serializable) 100.0f);
        java.lang.String str8 = strComparableImmutableTriple5.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple5.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0961");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.String str8 = strComparableImmutableTriple4.toString("hi!");
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0962");
        java.lang.Comparable<java.lang.String> strComparable0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>(strComparable0, (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable8.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0963");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable4 = strComparableImmutableTriple3.getRight();
        java.lang.String str5 = strComparableImmutableTriple3.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable4 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable4.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))" + "'", str5.equals("(((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,)),null,(hi!,class java.lang.Object,(hi!,class java.lang.Object,)))"));
    }

    @Test
    public void ImmutableTriple0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0964");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString("");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0965");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0966");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0967");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.String str8 = strComparableImmutableTriple4.toString("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))");
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", str8.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0968");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str7 = strComparableImmutableTriple4.toString("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))" + "'", str7.equals("(,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0969");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple6 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass4, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple6.left;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.String, java.lang.String, org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>> strImmutableTriple8 = org.apache.commons.lang3.tuple.ImmutableTriple.of("(hi!,class java.lang.Object,hi!)", "((hi!,class java.lang.Object,),class java.lang.Object,)", strComparableImmutableTriple6);
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple6.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strImmutableTriple8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0970");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Class<?> wildcardClass8 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void ImmutableTriple0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0971");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0972");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.String str7 = strComparableImmutableTriple4.toString("((hi!,class java.lang.Object,),class java.lang.Object,)");
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "((hi!,class java.lang.Object,),class java.lang.Object,)" + "'", str7.equals("((hi!,class java.lang.Object,),class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0973");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0974");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.String, java.lang.String> strComparableImmutableTriple3 = org.apache.commons.lang3.tuple.ImmutableTriple.of((java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class org.apache.commons.lang3.tuple.ImmutableTriple,hi!)", "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))", "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strComparableImmutableTriple3);
    }

    @Test
    public void ImmutableTriple0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0975");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0976");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0977");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0978");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.Type, java.io.Serializable, java.lang.reflect.Type> typeTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.Type) wildcardClass2, (java.io.Serializable) 0, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class java.lang.Object,(hi!,class java.lang.Object,))", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", strComparable9.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
    }

    @Test
    public void ImmutableTriple0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0979");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0980");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.String str6 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str6.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0981");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.Class<?> wildcardClass9 = strComparableImmutableTriple4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void ImmutableTriple0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0982");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0983");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        org.apache.commons.lang3.tuple.Triple<java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.reflect.GenericDeclaration> genericDeclarationTriple6 = org.apache.commons.lang3.tuple.Triple.of((java.lang.reflect.GenericDeclaration) wildcardClass2, "", (java.lang.reflect.GenericDeclaration) wildcardClass5);
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple8 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)");
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple8.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclarationTriple6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0984");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0985");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getRight();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0986");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0987");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0988");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "hi!" + "'", strComparable9.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0989");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.left;
        java.lang.String str7 = strComparableImmutableTriple4.toString();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str7.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
    }

    @Test
    public void ImmutableTriple0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0990");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple5 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass3, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple5.right;
        java.lang.reflect.GenericDeclaration genericDeclaration7 = strComparableImmutableTriple5.middle;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple9 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", genericDeclaration7, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,(hi!,class java.lang.Object,)),null,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration7);
    }

    @Test
    public void ImmutableTriple0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0991");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.middle;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0992");
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object> charSequenceImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.CharSequence, java.lang.String, java.lang.Object>((java.lang.CharSequence) "hi!", "hi!", (java.lang.Object) (-1.0d));
        java.lang.Class<?> wildcardClass5 = charSequenceImmutableTriple4.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple7 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,)", (java.lang.reflect.GenericDeclaration) wildcardClass5, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple7.right;
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple7.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", strComparable9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0993");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0994");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "" + "'", strComparable9.equals(""));
    }

    @Test
    public void ImmutableTriple0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0995");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.reflect.GenericDeclaration genericDeclaration5 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getRight();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple4.middle;
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "" + "'", strComparable6.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0996");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.getRight();
        java.lang.String str9 = strComparableImmutableTriple4.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "" + "'", strComparable8.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str9.equals("(hi!,class java.lang.Object,)"));
    }

    @Test
    public void ImmutableTriple0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0997");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.String str5 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.middle;
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable8 = strComparableImmutableTriple4.left;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str5.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable8 + "' != '" + "hi!" + "'", strComparable8.equals("hi!"));
    }

    @Test
    public void ImmutableTriple0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0998");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.left;
        java.lang.Comparable<java.lang.String> strComparable6 = strComparableImmutableTriple4.getLeft();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.left;
        java.lang.String str8 = strComparableImmutableTriple4.toString();
        java.lang.reflect.GenericDeclaration genericDeclaration9 = strComparableImmutableTriple4.getMiddle();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "hi!" + "'", strComparable5.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable6 + "' != '" + "hi!" + "'", strComparable6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "hi!" + "'", strComparable7.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "(hi!,class java.lang.Object,)" + "'", str8.equals("(hi!,class java.lang.Object,)"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration9);
    }

    @Test
    public void ImmutableTriple0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple0999");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple4 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "hi!", (java.lang.reflect.GenericDeclaration) wildcardClass2, (java.lang.Comparable<java.lang.String>) "");
        java.lang.Comparable<java.lang.String> strComparable5 = strComparableImmutableTriple4.getRight();
        java.lang.reflect.GenericDeclaration genericDeclaration6 = strComparableImmutableTriple4.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple4.right;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable5 + "' != '" + "" + "'", strComparable5.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(genericDeclaration6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "" + "'", strComparable7.equals(""));
    }

    @Test
    public void ImmutableTriple1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ImmutableTriple1.ImmutableTriple1000");
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>> strComparableImmutableTriple3 = new org.apache.commons.lang3.tuple.ImmutableTriple<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration, java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))", genericDeclaration1, (java.lang.Comparable<java.lang.String>) "((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,)");
        java.lang.reflect.GenericDeclaration genericDeclaration4 = strComparableImmutableTriple3.middle;
        java.lang.String str6 = strComparableImmutableTriple3.toString("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))");
        java.lang.Comparable<java.lang.String> strComparable7 = strComparableImmutableTriple3.left;
        java.lang.reflect.GenericDeclaration genericDeclaration8 = strComparableImmutableTriple3.getMiddle();
        java.lang.Comparable<java.lang.String> strComparable9 = strComparableImmutableTriple3.getLeft();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))" + "'", str6.equals("((,class org.apache.commons.lang3.tuple.ImmutableTriple,(hi!,class java.lang.Object,)),class java.lang.Object,((hi!,class java.lang.Object,),class org.apache.commons.lang3.tuple.ImmutableTriple,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable7 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable7.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(genericDeclaration8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + strComparable9 + "' != '" + "(hi!,class java.lang.Object,(hi!,class java.lang.Object,))" + "'", strComparable9.equals("(hi!,class java.lang.Object,(hi!,class java.lang.Object,))"));
    }
}

