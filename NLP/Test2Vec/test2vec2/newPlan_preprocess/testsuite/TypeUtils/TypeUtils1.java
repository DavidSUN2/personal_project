package TypeUtils;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TypeUtils1 {

    public static boolean debug = false;

    @Test
    public void TypeUtils501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils501");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils502");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils503");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils504");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils505");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils506");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils507");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils508");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils509");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils510");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils511");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0f, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils512");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) 0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils513");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils514");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils515");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils516");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils517");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils518");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils519");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils520");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils521");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils522");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils523");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils524");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils525");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils526");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils527");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils528");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils529");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils530");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils531");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils532");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils533");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils534");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils535");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils536");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils537");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils538");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils539");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils540");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils541");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils542");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils543");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils544");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils545");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils546");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils547");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils548");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass7 = type4.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils549");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils550");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils551");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils552");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils553");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils554");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils555");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils556");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils557");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils558");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils559");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils560");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils561");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils562");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils563");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = null;
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils564");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils565");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils566");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils567");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils568");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils569");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils570");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils571");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type6);
        java.lang.reflect.Type type8 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils572");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils573");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils574");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils575");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils576");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils577");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils578");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, type6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils579");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils580");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils581");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils582");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils583");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils584");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.Class<?> wildcardClass9 = type4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils585");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils586");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils587");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils588");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils589");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils590");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, type6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils591");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils592");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils593");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils594");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils595");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils596");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils597");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils598");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils599");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils600");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils601");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils602");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils603");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils604");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils605");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils606");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils607");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils608");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils609");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils610");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils611");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils612");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils613");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils614");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils615");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils616");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils617");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils618");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils619");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils620");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils621");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils622");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils623");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils624");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils625");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void TypeUtils626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils626");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils627");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils628");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils629");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils630");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils631");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils632");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils633");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils634");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils635");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils636");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils637");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils638");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils639");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils640");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils641");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils642");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass3);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void TypeUtils643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils643");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils644");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils645");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils646");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils647");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils648");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils649");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils650");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void TypeUtils651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils651");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils652");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils653");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils654");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils655");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils656");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils657");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils658");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils659");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils660");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils661");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils662");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils663");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils664");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils665");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils666");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils667");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils668");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils669");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils670");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils671");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils672");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils673");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils674");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils675");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils676");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils677");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils678");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass9 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils679");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils680");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils681");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void TypeUtils682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils682");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils683");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils684");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass9 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils685");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils686");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils687");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils688");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils689");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils690");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils691");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils692");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils693");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils694");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils695");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils696");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils697");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils698");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils699");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils700");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils701");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils702");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, type6);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils703");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils704");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils705");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils706");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils707");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils708");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils709");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils710");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils711");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils712");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils713");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils714");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils715");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils716");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils717");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils718");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils719");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils720");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils721");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils722");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils723");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils724");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils725");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils726");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils727");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils728");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils729");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils730");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils731");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils732");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils733");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils734");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils735");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils736");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils737");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils738");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils739");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils740");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils741");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils742");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils743");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void TypeUtils744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils744");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils745");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils746");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils747");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils748");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils749");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils750");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = type7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils751");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils752");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils753");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils754");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils755");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils756");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils757");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils758");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils759");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void TypeUtils760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils760");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils761");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils762");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type7);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils763");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils764");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 100, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils765");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils766");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = null;
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass2, type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils767");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils768");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils769");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils770");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils771");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils772");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type5, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils773");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void TypeUtils774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils774");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils775");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils776");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils777");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils778");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils779");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass9 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils780");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils781");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void TypeUtils782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils782");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils783");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils784");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = type7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils785");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils786");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils787");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils788");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils789");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils790");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils791");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils792");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils793");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils794");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils795");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils796");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type5, type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass9 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils797");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils798");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils799");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils800");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils801");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils802");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils803");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils804");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void TypeUtils805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils805");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils806");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils807");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils808");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils809");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils810");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils811");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils812");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils813");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils814");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils815");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils816");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean6, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils817");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils818");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils819");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeUtils0, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils820");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils821");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils822");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils823");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils824");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils825");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils826");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils827");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils828");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils829");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils830");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils831");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.Class<?> wildcardClass8 = type4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils832");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass9 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils833");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils834");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils835");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils836");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils837");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils838");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils839");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils840");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils841");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils842");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils843");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils844");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils845");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils846");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils847");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void TypeUtils848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils848");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils849");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void TypeUtils850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils850");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1L), (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils851");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils852");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils853");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils854");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils855");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils856");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils857");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils858");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils859");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void TypeUtils860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils860");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils861");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils862");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils863");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils864");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils865");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils866");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils867");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils868");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils869");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils870");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils871");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils872");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils873");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils874");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils875");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass6 = type4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils876");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils877");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils878");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray3.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils879");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils880");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = type6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils881");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils882");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils883");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils884");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils885");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils886");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils887");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils888");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils889");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils890");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils891");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils892");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils893");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils894");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils895");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean6, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils896");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils897");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils898");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils899");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void TypeUtils900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils900");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils901");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils902");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils903");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils904");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = type7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils905");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) type4, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils906");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils907");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils908");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils909");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils910");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils911");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils912");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils913");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils914");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils915");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils916");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils917");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils918");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils919");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils920");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void TypeUtils921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils921");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils922");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils923");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils924");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils925");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void TypeUtils926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils926");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils927");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils928");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils929");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils930");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils931");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils932");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
    }

    @Test
    public void TypeUtils933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils933");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils934");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils935");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils936");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils937");
        java.lang.Object obj0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils938");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils939");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils940");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils941");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void TypeUtils942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils942");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void TypeUtils943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils943");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = null;
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils944");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeUtils0, (java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass8 = typeUtils0.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils945");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils946");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils947");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils948");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils949");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils950");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils951");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils952");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils953");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils954");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils955");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils956");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils957");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils958");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils959");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils960");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils961");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils962");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils963");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils964");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils965");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils966");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils967");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils968");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils969");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils970");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils971");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) type6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils972");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void TypeUtils973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils973");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils974");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils975");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils976");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils977");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, type6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils978");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils979");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils980");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils981");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils982");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils983");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils984");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils985");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils986");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass6 = type4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils1.TypeUtils987");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }
}

