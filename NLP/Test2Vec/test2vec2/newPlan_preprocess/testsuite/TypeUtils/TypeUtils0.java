package TypeUtils;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TypeUtils0 {

    public static boolean debug = false;

    @Test
    public void TypeUtils001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils001");
        java.lang.reflect.Type type0 = null;
        boolean boolean1 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void TypeUtils002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils002");
        java.lang.reflect.ParameterizedType parameterizedType0 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> wildcardTypeVariableMap1 = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(parameterizedType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils003");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass2 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils004");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type1);
    }

    @Test
    public void TypeUtils005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils005");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 100.0f, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils006");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils007");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils008");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void TypeUtils009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils009");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils010");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils011");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils012");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils013");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { wildcardClass1, wildcardClass3 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils014");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils015");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils016");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils017");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils018");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils019");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils020");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils021");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils022");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void TypeUtils023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils023");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils024");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) true, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils025");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = typeArray1.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils026");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils027");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils028");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0f), type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils029");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils030");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) 10, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils031");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils032");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils033");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils034");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) "hi!", type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils035");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils036");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils037");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils038");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils039");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils040");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils041");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils042");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils043");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils044");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils045");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils046");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils047");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils048");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils049");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils050");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils051");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils052");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils053");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils054");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils055");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils056");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils057");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils058");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils059");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils060");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray2, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils061");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils062");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils063");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils064");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils065");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils066");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils067");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils068");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils069");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils070");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils071");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils072");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
    }

    @Test
    public void TypeUtils073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils073");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils074");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) ' ', (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils075");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils076");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils077");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils078");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils079");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils080");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils081");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils082");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils083");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils084");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils085");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArray1.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils086");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils087");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils088");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils089");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils090");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils091");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils092");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils093");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils094");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils095");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils096");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils097");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0f, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils098");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils099");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils100");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils101");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils102");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 1, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils103");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils104");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils105");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils106");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils107");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils108");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils109");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils110");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils111");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils112");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type5, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils113");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils114");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils115");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils116");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils117");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils118");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils119");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils120");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) ' ', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils121");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils122");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils123");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils124");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils125");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils126");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils127");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils128");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void TypeUtils129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils129");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils130");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils131");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils132");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils133");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils134");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils135");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) 10, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils136");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils137");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils138");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils139");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils140");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils141");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils142");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass6 = type5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void TypeUtils143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils143");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils144");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils145");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils146");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils147");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils148");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils149");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils150");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils151");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils152");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils153");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils154");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils155");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils156");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils157");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils158");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils159");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils160");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0d), (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils161");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils162");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils163");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils164");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils165");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils166");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils167");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils168");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils169");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils170");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass7 = typeArray1.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils171");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils172");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils173");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils174");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils175");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils176");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils177");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils178");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray5, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils179");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils180");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils181");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils182");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils183");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void TypeUtils184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils184");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils185");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils186");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils187");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils188");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils189");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils190");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils191");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils192");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean3, type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils193");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils194");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils195");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils196");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils197");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils198");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils199");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils200");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils201");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils202");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils203");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils204");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils205");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils206");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils207");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 0, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils208");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils209");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils210");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils211");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils212");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils213");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils214");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass6 = type4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils215");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils216");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils217");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils218");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils219");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils220");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils221");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils222");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils223");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils224");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils225");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils226");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils227");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = type6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils228");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils229");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils230");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils231");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils232");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils233");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils234");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils235");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void TypeUtils236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils236");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils237");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils238");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils239");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils240");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void TypeUtils241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils241");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils242");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils243");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils244");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils245");
        java.lang.Object obj0 = new java.lang.Object();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils246");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass2, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils247");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils248");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils249");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils250");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils251");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils252");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils253");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils254");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils255");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils256");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils257");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils258");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0f), (java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils259");
        java.lang.Object obj0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils260");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils261");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils262");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils263");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = null;
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void TypeUtils264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils264");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void TypeUtils265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils265");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils266");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils267");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils268");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils269");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils270");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils271");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils272");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils273");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.Class<?> wildcardClass7 = type4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils274");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 0, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils275");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils276");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils277");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils278");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils279");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils280");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils281");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils282");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils283");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils284");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils285");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils286");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils287");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils288");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils289");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils290");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils291");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils292");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils293");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils294");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils295");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void TypeUtils296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils296");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils297");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils298");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils299");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils300");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils301");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils302");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils303");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils304");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils305");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void TypeUtils306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils306");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils307");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils308");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils309");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils310");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils311");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray3.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils312");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils313");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = null;
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass4, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils314");
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils315");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils316");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils317");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils318");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils319");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils320");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils321");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils322");
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1L, (java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils323");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils324");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils325");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils326");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils327");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils328");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils329");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils330");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils331");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils332");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils333");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils334");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils335");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils336");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils337");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils338");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils339");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) type7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils340");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils341");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils342");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils343");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils344");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils345");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils346");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils347");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils348");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils349");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils350");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils351");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils352");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils353");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass7 = type6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils354");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray4, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils355");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils356");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils357");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils358");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils359");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils360");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils361");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils362");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils363");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Object obj4 = new java.lang.Object();
        java.lang.Class<?> wildcardClass5 = obj4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils364");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils365");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray3.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils366");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils367");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils368");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils369");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils370");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils371");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils372");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils373");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils374");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils375");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils376");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils377");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils378");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils379");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 1.0d, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils380");
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 100.0d, type1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void TypeUtils381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils381");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = type4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void TypeUtils382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils382");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils383");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils384");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils385");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils386");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils387");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils388");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils389");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils390");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils391");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils392");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray1.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils393");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils394");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils395");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils396");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils397");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils398");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils399");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils400");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils401");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass3);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils402");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils403");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils404");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils405");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils406");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils407");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils408");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils409");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = type7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils410");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils411");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils412");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils413");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void TypeUtils414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils414");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils415");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, type6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
    }

    @Test
    public void TypeUtils416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils416");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils417");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils418");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils419");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils420");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils421");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils422");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils423");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils424");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils425");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils426");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils427");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils428");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils429");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils430");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils431");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils432");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils433");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass8 = type6.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils434");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils435");
        java.lang.Object obj0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance(obj0, type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void TypeUtils436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils436");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils437");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils438");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils439");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils440");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils441");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils442");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils443");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray1, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils444");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils445");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils446");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass6 = type5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils447");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        java.lang.Class<?> wildcardClass7 = type4.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils448");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj5 = new java.lang.Object();
        java.lang.Class<?> wildcardClass6 = obj5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils449");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils450");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils451");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils452");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass9 = typeArray3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils453");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils454");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils455");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass9 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils456");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils457");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils458");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils459");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils460");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils461");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        java.lang.Class<?> wildcardClass4 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils5 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass6 = typeUtils5.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils462");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass7 = type6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
    }

    @Test
    public void TypeUtils463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils463");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
    }

    @Test
    public void TypeUtils464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils464");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils465");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
    }

    @Test
    public void TypeUtils466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils466");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils467");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils468");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils469");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type8 = null;
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils470");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 10.0f, (java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils471");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void TypeUtils472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils472");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = null;
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils473");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void TypeUtils474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils474");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void TypeUtils475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils475");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray5.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils476");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type type7 = null;
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray5, type7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils477");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.Class<?> wildcardClass8 = type7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils478");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils479");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) 'a', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean6, (java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils480");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils481");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        // The following exception was thrown during execution in TypeUtils generation
        try {
            java.lang.Class<?> wildcardClass9 = type8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void TypeUtils482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils482");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (byte) 100, (java.lang.reflect.Type) wildcardClass4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils483");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void TypeUtils484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils484");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        java.lang.Class<?> wildcardClass9 = type6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils485");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils486");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void TypeUtils487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils487");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils488");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils489");
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (short) -1, (java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void TypeUtils490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils490");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass8 = typeArray3.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void TypeUtils491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils491");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils492");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils3 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass4 = typeUtils3.getClass();
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils typeUtils6 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass7 = typeUtils6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) (-1.0d), (java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils493");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils1 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass2 = typeUtils1.getClass();
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '#', (java.lang.reflect.Type) wildcardClass2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, type7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils494");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils495");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass8 = typeArray4.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void TypeUtils496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils496");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type7);
        java.lang.Class<?> wildcardClass9 = type7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void TypeUtils497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils497");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass1 = typeUtils0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils2 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass3 = typeUtils2.getClass();
        org.apache.commons.lang3.reflect.TypeUtils typeUtils4 = new org.apache.commons.lang3.reflect.TypeUtils();
        java.lang.Class<?> wildcardClass5 = typeUtils4.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass5);
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void TypeUtils498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils498");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type4);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils499");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type6 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type5);
        java.lang.Class<?> wildcardClass7 = type5.getClass();
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(typeArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(type5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void TypeUtils500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "TypeUtils0.TypeUtils500");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass2);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(type4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }
}

